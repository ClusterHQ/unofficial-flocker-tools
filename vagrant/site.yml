---
- hosts:
  - flocker_cli_servers
  max_fail_percentage: 1
  sudo: true
  user: vagrant
  
  pre_tasks:
    - name: clean partial lists
      command: rm -f /var/lib/apt/lists/*

    - name: update apt cache
      command: apt-get update

  roles:
      # configure /etc/resolv.conf
      - Azulinho.azulinho-google-dns

      # deploy SSH keys
      - Azulinho.azulinho-ssh-keys

      # install pip
      - mbasanta.pip

  post_tasks:
    - name: install pyaml
      pip: name=pyaml

    - name: add flocker repository
      apt_repository:
        repo='deb https://clusterhq-archive.s3.amazonaws.com/ubuntu-testing/14.04/$(ARCH) /'
        state=present

    - name: install flocker
      apt:
        name=clusterhq-flocker-cli
        update_cache=yes
        state=latest
        force=yes

    - name: create /etc/flocker
      file: path=/etc/flocker
        state=directory

    - name: flocker-ca initialize
      command: /opt/flocker/bin/flocker-ca initialize {{flocker.cluster_name}}
        chdir=/etc/flocker
        creates=cluster.key

    # creates /etc/flocker/control-192.168.35.10.crt
    #
    - name: flocker-ca create-control-certificate
      command: /opt/flocker/bin/flocker-ca create-control-certificate {{flocker.control_node}}
        chdir=/etc/flocker
        creates="control-{{flocker.control_node}}.crt"
      register: control_node_uuid

    # we need to symlink the /etc/flocker/control-* to
    # /etc/flocker-control-server-*
    #
    - name: symlinks control-service files
      file: src={{item.src}}
        dest={{item.dst}}
        mode=0600
        force=yes
        state=link
      with_items:
        - { src: "/etc/flocker/control-{{flocker.control_node}}.key",
            dst: "/etc/flocker/control-service-{{flocker.control_node}}.key" }
        - { src: "/etc/flocker/control-{{flocker.control_node}}.crt",
            dst: "/etc/flocker/control-service-{{flocker.control_node}}.crt" }

    # create the node certificates and register the resulting filenames
    # into uuid_agents
    - name: flocker-ca create-node-certificate for servers
      command: /opt/flocker/bin/flocker-ca create-node-certificate
        chdir=/etc/flocker
      register: uuids_agents
      with_items: flocker.agent_nodes


    # Ansible typically executes its actions from a management host (push mode)
    # so here we download the (crt|key) files we just built to our management
    # workstation, we will upload these later on to the correct nodes.
    # this restricts ssh access between the different hosts
    - name: fetch control files from host
      fetch: src=/etc/flocker/control-{{item.stdout.split(' ')[1]}}
        dest=control-{{item.stdout.split(' ')[1]}}
      with_items: uuids_agents.results
      when: item.changed

    # Create the API certificate for each user
    - name: flocker-ca create-api-certificate for users
      command: /opt/flocker/bin/flocker-ca create-api-certificate {{item}}
        chdir=/etc/flocker
        creates="{{item}}.crt"
      register: uuids_users
      with_items: flocker.users

    # And download them to our management workstation
    - name: fetch control files from host
      fetch: src=/etc/flocker/{{item.stdout.split(' ')[1]}}
        dest={{item.stdout.split(' ')[1]}}
      with_items: uuids_users.results
      when: item.changed


- hosts:
  - flocker_node_servers
  max_fail_percentage: 1
  sudo: true
  user: vagrant

  pre_tasks:
    - name: clean partial lists
      command: rm -f /var/lib/apt/lists/*

    - name: update apt cache
      command: apt-get update

  roles:
    # configure /etc/resolv.conf
    - Azulinho.azulinho-google-dns

    # deploy SSH keys
    - Azulinho.azulinho-ssh-keys

    # install pip
    - mbasanta.pip

  post_tasks:

    - name: install pyaml
      pip: name=pyaml

    - name: add docker repository
      apt_repository:
        repo='ppa:james-page/docker'
        state=present

    - name: install docker.io
      apt:
        name=docker.io
        update_cache=yes
        state=latest

    - name: add flocker repository
      apt_repository:
        repo='deb https://clusterhq-archive.s3.amazonaws.com/ubuntu-testing/14.04/$(ARCH) /'
        state=present

    - name: install flocker
      apt:
        name=clusterhq-flocker-node
        update_cache=yes
        state=latest
        force=yes

    - name: create /etc/flocker
      file: path=/etc/flocker
        state=directory

    - name: create agent.yml
      copy: dest=/etc/flocker/agent.yml
        content="{{ flocker['agent_config']) | to_nice_yaml }}"

    # copy the generated files by flocker-tools to our flocker-nodes
    - name: copy control files to host
      copy: src=control-{{item.stdout.split(' ')[1]}}
        dest=/etc/flocker/control-{{item.stdout.split(' ')[1]}}
      with_items: uuids_agents.results
      when: item.changed

    - name: copy control files from host
      copy: src=/etc/flocker/{{item.stdout.split(' ')[1]}}
        dest={{item.stdout.split(' ')[1]}}
      with_items: uuids_users.results
      when: item.changed
